#Конструкция if/elif/else позволяет делать ответвления в ходе программы. Программа уходит в ветку при выполнении определенного условия.
#В этой конструкции только if является обязательным, elif и else опциональны:

#Проверка if всегда идет первой.
#После оператора if должно быть какое-то условие: если это условие выполняется (возвращает True), то действия в блоке if выполняются.
#С помощью elif можно сделать несколько разветвлений, то есть, проверять входящие данные на разные условия.
#Блок elif это тот же if, но только следующая проверка. Грубо говоря, это «а если …»
#Блоков elif может быть много.
#Блок else выполняется в том случае, если ни одно из условий if или elif не было истинным.

#Пример конструкции:

print (" \n#1")

sum = 51
comparison = 60

if sum == comparison:
    print ("Сумма равна {0}".format(comparison))
elif sum > comparison:
    print ("Сумма больше {0}".format(comparison))
elif sum < comparison:
    print ("Сумма меньше {0}".format(comparison))

"""
В Python, кроме очевидных значений True и False, всем остальным объектам также соответствует ложное или истинное значение: 

#истинное значение:

#любое ненулевое число
#любая непустая строка
#любой непустой объект

#ложное значение:

#0
#None
#пустая строка
#пустой объект
"""
#Например, так как пустой список это ложное значение, проверить, пустой ли список, можно таким образом:

print (" \n#2")

list = [100, 500]

if list:
    print ("Это не пустой список")
else:
    print ("Это пустой список")

#Тот же результат можно было бы получить несколько иначе:

print (" \n#3")

if len(list) != 0: #!= (Не равно)
    print ("Это не пустой список")
else:
    print ("Это пустой список")

#Оператор in позволяет выполнять проверку на наличие элемента в последовательности (например, элемента в списке или подстроки в строке):

print (" \n#4")

print ("FKYL" in "TripiniFKYL")

print (10 in [10, 20, 30])

#При использовании со словарями условие in выполняет проверку по ключам словаря:

print (" \n#5")

dictionary = {"name": "Trip", "age": [17, 18, 19, 20], "man": True}

print ("age" in dictionary)

#В условиях могут также использоваться логические операторы and, or, not:

print (" \n#6")

dictionary = {"name": "Trip", "age": [17, 18, 19, 20], "man": True}
list1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 110]

print ("age" in dictionary and 110 in list1)

print ("dicksize" in dictionary or 20 in list1)

print (not "dicksize" in dictionary)

print ("dicksize" not in dictionary)

#В Python оператор and возвращает не булево значение, а значение одного из операндов.

#Если оба операнда являются истиной, результатом выражения будет последнее значение:

print (" \n#7")

print ("num1" and "num2" and "num3")

#Если один из операторов является ложью, результатом выражения будет первое ложное значение:

print (True and False and list1)

#Оператор or, как и оператор and, возвращает значение одного из операндов.
#При оценке операндов возвращается первый истинный операнд:

print (" \n#8")

print ("num1" or "num2" or "num3")

print (False or True or dictionary)

#Если все значения являются ложными, возвращается последнее значение:

print ({} or [])

#Важная особенность работы оператора or - операнды, которые находятся после истинного, не вычисляются:

print ([] or [1, 2] or sorted[2, 1])

#Пример

print (" \n#9")

username = input ("Введите имя пользователя: ")
mail = input ("Введите ваш почтовый ящик: ")
password = input ("Введите пароль: ")

if len(password) > 8:
    print ("User {0} зарегистрирован! Логин и пароль продублированы на почту {1}".format(username, mail))
elif username in password:
    print ("Пароль содержит имя пользователя")
else:
    print ("Пароль слишком короткий. Нужно больше 8 символов!")